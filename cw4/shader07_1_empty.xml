<?xml version="1.0" encoding="ISO-8859-1"?>
<pipeline>
<vertex>
<![CDATA[#version 400

uniform mat4 mvMatrix;
uniform mat4 pMatrix;
uniform mat3 normalMatrix; //mv matrix without translation

uniform vec4 lightPosition_camSpace; //light Position in camera space

in vec4 vertex_worldSpace;
in vec3 normal_worldSpace;
in vec2 textureCoordinate_input;

out data
{
	vec4 position_camSpace;
	vec3 normal_camSpace;
	vec2 textureCoordinate;
	vec4 color;
}vertexIn;

//Vertex shader compute the vectors per vertex
void main(void)
{
    //Put the vertex in the correct coordinate system by applying the model view matrix
    vec4 vertex_camSpace = mvMatrix*vertex_worldSpace;
	vertexIn.position_camSpace = vertex_camSpace;
	
    //Apply the model-view transformation to the normal (only rotation, no translation)
    //Normals put in the camera space
    vertexIn.normal_camSpace = normalize(normalMatrix*normal_worldSpace);

	//Color chosen as red
	vertexIn.color = vec4(1.0,0.0,0.0,1.0);
    
    //Texture coordinate
    vertexIn.textureCoordinate = textureCoordinate_input;
	
    gl_Position = pMatrix * vertex_camSpace;
}
















]]></vertex>
<geom>
<![CDATA[#version 400

layout(triangles) in;
layout(triangle_strip, max_vertices = 3) out;

uniform mat4 mvMatrix;
uniform mat4 pMatrix;
uniform mat3 normalMatrix; //mv matrix without translation

uniform vec4 lightPosition_camSpace; //light Position in camera space


in data
{
	vec4 position_camSpace;
	vec3 normal_camSpace;
	vec2 textureCoordinate;
	vec4 color;
}vertexIn[3];

out fragmentData
{
	vec4 position_camSpace;
	vec3 normal_camSpace;
	vec2 textureCoordinate;
	vec4 color;
} frag;


void main() {
  for(int i = 0; i < 3; i++) { // You used triangles, so it's always 3
    gl_Position = gl_in[i].gl_Position;
	frag.position_camSpace = vertexIn[i].position_camSpace;
	frag.normal_camSpace = vertexIn[i].normal_camSpace;
	frag.textureCoordinate = vertexIn[i].textureCoordinate;
	frag.color = vertexIn[i].color;
    EmitVertex();
  }
  EndPrimitive();
}















]]></geom>
<frag>
<![CDATA[#version 400

uniform vec4 ambient;
uniform vec4 diffuse;
uniform vec4 specular;
uniform float shininess;

uniform vec4 lightPosition_camSpace; //light Position in camera space

in fragmentData
{
	vec4 position_camSpace;
	vec3 normal_camSpace;
	vec2 textureCoordinate;
	vec4 color;
} frag;


out vec4 fragColor;

//Fragment shader computes the final color
void main(void)
{
	//Not used in that task
    fragColor =  frag.color;
}















]]></frag>
<R2TVert>
<![CDATA[#version 400
#extension GL_ARB_separate_shader_objects : enable

uniform mat4 mMatrix;
uniform mat4 mvMatrix;

in vec4 vertex_worldSpace;
in vec3 normal_worldSpace;

out vec3 dir; 

void  main () 
{ 
	vec4 vertex_modelSpace = mMatrix*vertex_worldSpace;
	
    dir = normalize ( vec3 ( vertex_modelSpace.x * 1.6,  vertex_modelSpace.y , -1.0 )); 
	
    gl_Position  = vertex_modelSpace; 
}
















]]></R2TVert>
<R2TFrag>
<![CDATA[#version 400

in vec3 dir; 
out vec4 outcolour;

uniform mat4 mMatrix;
uniform mat4 mvMatrix;
uniform mat4 mvMatrixScene;
uniform mat4 pMatrix;
uniform mat3 normalMatrix; //mv matrix without translation

const int raytraceDepth = 42;
const int numSpheres = 6;
const float epsilon = 0.1;

//example data structures
struct Ray
{
	vec3 origin;
	vec3 dir;
};

struct Sphere
{
	vec3 centre;
	float radius;
	vec3 colour;
};
struct Plane
{
	vec3 point;
	vec3 normal;
	vec3 colour;
};

struct Intersection
{
    float t; //closest hit
    vec3 point;	// hit point
    vec3 normal;	// normal
    int hit;	//did it hit?
    vec3 colour; // colour accumulation, can be also implemented in struct Ray
};

bool solveQuadratic(float a, float b, float c, float mui_0, float mui_1)
{
	// Finding the discriminant
	float dis = sqrt( (b*b) - (4*a*c));
	if (dis < 0) return false;

	mui_0 = (-b + dis) / (2*a);
	mui_1 = (-b - dis) / (2*a);
		
	return true;
}

vec3 reflect(vec3 dir, vec3 normal) {
	
	//v' = v - (2v . n)n
	return dir - (dot(2*dir,normal) * normal);

}

void shpere_intersect(Sphere sph, Ray ray, inout Intersection intersect)
{
	//TODO implement sphere intersection function
	float mui_0, mui_1;
	vec3 delta_p = sph.centre - ray.origin;
	// Preparing the quadratic formula, trying to solve mui
	// mui^2 + 2(mui)(dot(d, delta_p)) + (delta_p ^ 2 - r^2) = 0
	// Define the coefficients a,b and c
	vec3 d = ray.dir; //Need to normalise
	float a = dot(d, d);
	float b = 2 * dot(d, delta_p);
	float c = dot(delta_p, delta_p) - pow(sph.radius, 2);
	if (!solveQuadratic(a, b, c, mui_0, mui_1)) {
	  intersect.hit = 0;
	}
	
	if (mui_0 > mui_1) {
	  float temp = mui_0;
	  mui_0 = mui_1;
	  mui_1 = temp;
	}

	intersect.hit = 1;
	intersect.t = mui_0; // Check if need to do origin - mui_0 
	intersect.colour = sph.colour;
}

void plane_intersect(Plane pl, Ray ray, inout Intersection intersect)
{
	//TODO implement plane intersection function
	float mu;
	vec3 d = ray.dir;
	vec3 n = pl.normal;
	float denom = dot(ray.dir, n);
	mu = - (dot((ray.origin - pl.point), n) / denom);
	intersect.hit = 1;
	intersect.t =  mu;
	intersect.colour = pl.colour;
	
}

Sphere sphere[numSpheres];
Plane plane;
void Intersect(Ray r, inout Intersection i)
{
	//TODO implement intersection function

	for (int s = 0; s < numSpheres; s++){
	  	shpere_intersect(sphere[s], r, i);
	}

	plane_intersect(plane, r, i);
	
}

int seed = 0;
float rnd()
{
	seed = int(mod(float(seed)*1364.0+626.0, 509.0));
	return float(seed)/509.0;
}

vec3 computeShadow(in Intersection intersect)
{
	//TODO implement shadow computation
	return vec3(0,0,0);
}

void main()
{
	//please leave the scene config unaltered for marking 
	sphere[0].centre   = vec3(-2.0, 1.5, -3.5);
	sphere[0].radius   = 1.5;
	sphere[0].colour = vec3(0.8,0.8,0.8);
	sphere[1].centre   = vec3(-0.5, 0.0, -2.0);
	sphere[1].radius   = 0.6;
	sphere[1].colour = vec3(0.3,0.8,0.3);
	sphere[2].centre   = vec3(1.0, 0.7, -2.2);
	sphere[2].radius   = 0.8;
	sphere[2].colour = vec3(0.3,0.8,0.8);
	sphere[3].centre   = vec3(0.7, -0.3, -1.2);
	sphere[3].radius   = 0.2;
	sphere[3].colour = vec3(0.8,0.8,0.3);
	sphere[4].centre   = vec3(-0.7, -0.3, -1.2);
	sphere[4].radius   = 0.2;
	sphere[4].colour = vec3(0.8,0.3,0.3);
	sphere[5].centre   = vec3(0.2, -0.2, -1.2);
	sphere[5].radius   = 0.3;
	sphere[5].colour = vec3(0.8,0.3,0.8);
	plane.point = vec3(0,-0.5, 0);
	plane.normal = vec3(0, 1.0, 0);
	plane.colour = vec3(1, 1, 1);
	seed = int(mod(dir.x * dir.y * 39786038.0, 65536.0));
	//scene definition end

	vec4 colour = vec4(0,0,0,1);
	//TODO implement ray tracing main loop here
	Ray r;
	r.origin = vec3(0,0,0);
	r.dir = normalize(dir);

	for (int rd=0; rd < raytraceDepth; rd++) {
	  Intersection i;
	  i.hit = 0;
	  Intersect(r, i);
	  if (i.hit == 1) {
		outcolour += i.colour;
		//Compute Shadow later	   
	  } else {
	 	break;
	  }
	  
	  r.origin = i.point;
	  r.origin += epsilon * i.normal;
	  r.dir = normalize(reflect(r.dir, i.normal));
	}

	outcolour = colour;
}
















]]></R2TFrag>
</pipeline>
